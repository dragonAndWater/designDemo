反射概念：
    在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。包括静态属性和方法

反射原理：
    每个类被加载之后，系统都会为该类生成一个对应的Class对象，通过Class对象就可以访问到JVM中该类的信息，一旦类被加载到JVM中，同一个类将不会被再次载入。
    被载入JVM的类都有一个唯一标识就是该类的全名，即包括包名和类名。在运行期间通过这个（包名+类名）即可以找到这个Class对象。

反射优点：
    1：反射机制极大的提高了程序的灵活性和扩展性，降低模块的耦合性，提高自身的适应能力。
    2：通过反射机制可以让程序创建和控制任何类的对象，无需提前硬编码目标类。
    3：使用反射机制能够在运行时构造一个类的对象、判断一个类所具有的成员变量和方法、调用一个对象的方法。
    4：反射机制是构建框架技术的基础所在，使用反射可以避免将代码写死在框架中

反射缺点：
    1：性能问题--Java反射机制中包含了一些动态类型，所以Java虚拟机不能够对这些动态代码进行优化。因此，反射操作的效率要比正常操作效率低很多
    2：安全限制--使用反射通常需要程序的运行没有安全方面的限制。如果一个程序对安全性提出要求，则最好不要使用反射。
    3：程序健壮性--反射允许代码执行一些通常不被允许的操作，所以使用反射有可能会导致意想不到的后果。破坏了Java程序结构的抽象性